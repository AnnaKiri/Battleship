package Battleship;

import java.io.IOException;
import java.util.Scanner;

public class HelpFunctions {
	
	public static void showMap(String [][] array) {
		
		for (int i = 0; i<array.length; i++) {
			for (int j = 0; j<array[i].length; j++) {
				System.out.print(array[i][j] + " ");
			}
			System.out.println();
		}
	}
	
	public static boolean shipsAvailability (String [][] array) {
		for (int i = 0; i<array.length; i++) {
			for (int j = 0; j<array[i].length; j++) {
				if (array [i][j].equals("üö¢")) {
					 return true;
				} 
			}
		}
		
		return false;
	}
	
	public static void clearScreen() {   
	    try {
	      new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
	    } catch (InterruptedException e) {
	      // TODO Auto-generated catch block
	      e.printStackTrace();
	    } catch (IOException e) {
	      // TODO Auto-generated catch block
	      e.printStackTrace();
	    }
	}
	
	public static boolean coordinateCheck(int x, int y) {
		if ((x < 0 || x > 9) || (y < 0 || y > 9)){ ///
			return false;
		}
		
		return true;
	}
	
	public static boolean shipLengthCheck(String [] array, int n) {  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–æ—Ä–∞–±–ª—è
		if (array.length != n) {
			System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
			return false;
		}
		return true;
	}
	
	public static boolean coordinateValidation(String [] array) {  // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞ —Ö,—É –∏ —Ç–∏–ø–∞ int
		for (int i = 0; i < array.length; i++) {
			String[] temp2 = array[i].split(",");
			
			if (temp2.length != 2) {
				System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
				return false;
			}
			
			int x;
			int y;
			try {
				x = Integer.parseInt(temp2[0]);
				y = Integer.parseInt(temp2[1]);					
			} catch (NumberFormatException e) {
				System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
				return false;
			}
			
			if (!HelpFunctions.coordinateCheck(x, y)) {
				System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!");
				return false;
			}
		}
		return true;
	}
	
	public static boolean coordinateEqualityCheck(String [] array) {   // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, —á—Ç–æ –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É
		for(int i = 0; i<array.length; i++) {
			for(int j = 0; j<array.length; j++) {
				if ((i != j) && (array[i].equals(array[j]))) {
					System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
					return false;
				} 				// else –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å, —Ç.–∫. –¥–∞–ª–µ–µ –∫–æ–¥–∞ –Ω–µ—Ç
			}
		}
		return true;
	}
	
	public static boolean coordinateLinearityCheck(String [] array) {
		for (int i = 0; i < array.length -1; i++) {  // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–Ω–µ–π–Ω—ã
			String[] temp2 = array[i].split(",");
			int x1 = Integer.parseInt(temp2[0]);
			int y1 = Integer.parseInt(temp2[1]);
			
			String[] temp3 = array[i+1].split(",");  // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–∏–∞–≥–æ–Ω–∞–ª–∏
			int x2 = Integer.parseInt(temp3[0]);
			int y2 = Integer.parseInt(temp3[1]);
			
			if (Math.abs(x2-x1) > 1 || Math.abs(y2-y1) > 1) {
				System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
				return false;
			}
		}
		return true;	
	}
	
	public static boolean shipAreolaCheck(String [] array, String [][] array1) {
		for (int i = 0; i < array.length; i++) {  // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–µ–æ–ª–∞ –∫–æ—Ä–∞–±–ª—è
			String[] temp2 = array[i].split(",");
			int x = Integer.parseInt(temp2[0]);
			int y = Integer.parseInt(temp2[1]);
			for (int newX = x-1; newX <= x+1; newX++) {
				for (int newY = y-1; newY <= y+1; newY++) {
					if (coordinateCheck(newX, newY) && (array1[newX][newY].equals("üö¢"))) {
						System.out.println("–ê—Ä–µ–æ–ª —ç—Ç–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º –∫–æ—Ä–∞–±–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
						return false;
					} 
				}
			}
		}
		
		return true;
	}
	
	public static void areolaFilling(String [][] playerField) {
		for (int i = 0; i < playerField.length; i++) {
			for (int j = 0; j < playerField[i].length; j++) {
				if (playerField[i][j].equals("üö¢")) {
					for (int newX = i-1; newX <= i+1; newX++) {
						for (int newY = j-1; newY <= j+1; newY++) {
							if (coordinateCheck(newX, newY) && (playerField[newX][newY].equals("üü¶"))) {
								playerField[newX][newY] = "üü®";
							}
						}
					}
				}
			}
		}
	}
	
	public static boolean fieldCellFilling(String [] array, String [][] array1) {
		for (int i = 0; i < array.length; i++) { // –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –ø–æ–ª—è –∫–æ—Ä–∞–±–ª–µ–º
			String[] temp2 = array[i].split(",");
			int x = Integer.parseInt(temp2[0]);
			int y = Integer.parseInt(temp2[1]);
			array1[x][y] = "üö¢";
		}
		return true;
	}
	
	public static boolean generalCheckOfTheShip(String [] fourDeck, int n, String [][] playerField) {
		
		boolean allIsOk = true;
		
		allIsOk = allIsOk && HelpFunctions.shipLengthCheck(fourDeck, n);  // –µ—Å–ª–∏ –ø–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –º–µ—Ç–æ–¥–∞ allIsOk —Å—Ç–∞–Ω–µ—Ç false, —á—Ç–æ –¥–∞–ª—å—à–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –±—É–¥—É—Ç —á–∏—Ç–∞—Ç—å—Å—è, —Ç.–∫. –∏–∑ false —É–∂–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç true
		allIsOk = allIsOk && HelpFunctions.coordinateValidation(fourDeck);
		allIsOk = allIsOk && HelpFunctions.coordinateEqualityCheck(fourDeck);
		allIsOk = allIsOk && HelpFunctions.coordinateLinearityCheck(fourDeck);
		allIsOk = allIsOk && HelpFunctions.shipAreolaCheck(fourDeck, playerField);
		
		return allIsOk;
	}
	
	public static int hit(String [][] playerFieldForGame, String [][] playerFieldForCheck, int currentPlayer, int x, int y) {
		int player = currentPlayer;
		if (playerFieldForGame[x][y].equals("üö¢")) {
			playerFieldForGame[x][y] = "üü•";
			playerFieldForCheck[x][y] = "üü•";
			HelpFunctions.clearScreen();
			System.out.println("–ü–æ–ø–∞–ª!");
		} else {
			playerFieldForGame[x][y] = "‚¨ú";
			playerFieldForCheck[x][y] = "‚¨ú";
			HelpFunctions.clearScreen();
			System.out.println("–ú–∏–º–æ!");
			if (currentPlayer == 2) {
				player = 1;
			} else {
				player = 2;
			}
		}
		HelpFunctions.showMap(playerFieldForCheck);
		return player;
	}
}
