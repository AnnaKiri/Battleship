package Battleship;

import java.io.IOException;
import java.util.Scanner;

public class PlayingFieldInput {
	public static String [][] playingField() {
				
		String [][] playerField = new String[10][10];
		for(int i = 0; i<playerField.length; i++) {
			for(int j = 0; j<playerField[i].length; j++) {
				playerField[i][j] = "üü¶";
			}
		}
		
		Scanner scan = new Scanner(System.in);
		String ship = scan.nextLine();
		
		
		
		
		while(true) {
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ç—ã—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y;x,y;x,y;x,y)");
			ship = scan.nextLine();
			String[] fourDeck = ship.split(";"); // 4 —ç–ª–µ–º–µ–Ω—Ç–∞
			
			if (fourDeck.length != 4) {
				System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
				continue;
			}
			
			// check
			boolean allIsOk = true;
			for (int i = 0; i < fourDeck.length; i++) {
				String[] temp2 = fourDeck[i].split(",");
				
				if (temp2.length != 2) {
					allIsOk = false;
					System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
					break;
				}
				
				int x;
				int y;
				try {
					x = Integer.parseInt(temp2[0]);
					y = Integer.parseInt(temp2[1]);					
				} catch (NumberFormatException e) {
					System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
					allIsOk = false;
					break;
				}
				
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					allIsOk = false;
					break;
				}
			}
			
			if (allIsOk) {
				for(int i = 0; i<fourDeck.length; i++) {   // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, —á—Ç–æ –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É
					for(int j = 0; j<fourDeck.length; j++) {
						if ((i != j) && (fourDeck[i].equals(fourDeck[j]))) {
							allIsOk = false;
							System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
							break;
						} 				// else –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å, —Ç.–∫. –¥–∞–ª–µ–µ –∫–æ–¥–∞ –Ω–µ—Ç
					}
				}
			}
			
			if (allIsOk) {
				for (int i = 0; i < fourDeck.length -1; i++) {  // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–Ω–µ–π–Ω—ã
					String[] temp2 = fourDeck[i].split(",");
					int x1 = Integer.parseInt(temp2[0]);
					int y1 = Integer.parseInt(temp2[1]);
					
					String[] temp3 = fourDeck[i+1].split(",");  // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–∏–∞–≥–æ–Ω–∞–ª–∏
					int x2 = Integer.parseInt(temp3[0]);
					int y2 = Integer.parseInt(temp3[1]);
					
					if (Math.abs(x2-x1) > 1 || Math.abs(y2-y1) > 1) {
						allIsOk = false;
						System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
						break;
					}
					
				}
			}

			if (allIsOk) {
				for (int i = 0; i < fourDeck.length; i++) {
					String[] temp2 = fourDeck[i].split(",");
					int x = Integer.parseInt(temp2[0]);
					int y = Integer.parseInt(temp2[1]);
					for (int newX = x-1; newX <= x+1; newX ++) {
						for (int newY = y-1; newY <= y+1; newY ++) {
							if (playerField[newX][newY].equals("üö¢")) {
								allIsOk = false;
								System.out.println("–ê—Ä–µ–æ–ª —ç—Ç–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º –∫–æ—Ä–∞–±–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!");
								break;
							} 
						}
					}
				}
			}
			

			// fill
			if (allIsOk) {
				for (int i = 0; i < fourDeck.length; i++) {
					String[] temp2 = fourDeck[i].split(",");
					int x = Integer.parseInt(temp2[0]);
					int y = Integer.parseInt(temp2[1]);
					playerField[x][y] = "üö¢";
				}
				
				break;
			} else {
				continue;		
			}
		}
		
		
		
		
		
		
		
		
		while(true) {
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y;x,y;x,y)");
			ship = scan.nextLine();
			String[] threeDeck1 = ship.split(";"); // 3 —ç–ª–µ–º–µ–Ω—Ç–∞
			for (int i = 0; i < threeDeck1.length; i++) {
				String[] temp2 = threeDeck1[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
		}
		
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–µ—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y;x,y;x,y)");
			ship = scan.nextLine();
			String[] threeDeck2 = ship.split(";"); // 3 —ç–ª–µ–º–µ–Ω—Ç–∞
			for (int i = 0; i < threeDeck2.length; i++) {
				String[] temp2 = threeDeck2[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
			
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–≤—É—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y;x,y)");
			ship = scan.nextLine();
			String[] doubleDeck1 = ship.split(";"); // 2 —ç–ª–µ–º–µ–Ω—Ç–∞
			for (int i = 0; i < doubleDeck1.length; i++) {
				String[] temp2 = doubleDeck1[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
			
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–≤—É—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y;x,y)");
			ship = scan.nextLine();
			String[] doubleDeck2 = ship.split(";"); // 2 —ç–ª–µ–º–µ–Ω—Ç–∞
			for (int i = 0; i < doubleDeck2.length; i++) {
				String[] temp2 = doubleDeck2[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
			
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–≤—É—Ö–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y;x,y)");
			ship = scan.nextLine();
			String[] doubleDeck3 = ship.split(";"); // 2 —ç–ª–µ–º–µ–Ω—Ç–∞
			for (int i = 0; i < doubleDeck3.length; i++) {
				String[] temp2 = doubleDeck3[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
			
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y)");
			ship = scan.nextLine();
			String[] singleDeck1 = ship.split(";"); // 1 —ç–ª–µ–º–µ–Ω—Ç
			for (int i = 0; i < singleDeck1.length; i++) {
				String[] temp2 = singleDeck1[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
			
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y)");
			ship = scan.nextLine();
			String[] singleDeck2 = ship.split(";"); // 1 —ç–ª–µ–º–µ–Ω—Ç
			for (int i = 0; i < singleDeck2.length; i++) {
				String[] temp2 = singleDeck2[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
			
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y)");
			ship = scan.nextLine();
			String[] singleDeck3 = ship.split(";"); // 1 —ç–ª–µ–º–µ–Ω—Ç
			for (int i = 0; i < singleDeck3.length; i++) {
				String[] temp2 = singleDeck3[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
			
			System.out.println("–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (—Ñ–æ—Ä–º–∞—Ç: x,y)");
			ship = scan.nextLine();
			String[] singleDeck4 = ship.split(";"); // 1 —ç–ª–µ–º–µ–Ω—Ç
			for (int i = 0; i < singleDeck4.length; i++) {
				String[] temp2 = singleDeck4[i].split(",");
				int x = Integer.parseInt(temp2[0]);
				int y = Integer.parseInt(temp2[1]);
				boolean check = HelpFunctions.coordinateCheck(x, y);
				if (!check) {
					continue;
				}
				playerField[x][y] = "üö¢";
			}
		
		for(int i = 0; i<playerField.length; i++) {
			for(int j = 0; j<playerField[i].length; j++) {
			System.out.print(playerField[i][j] + " ");
			}
			System.out.println();
		}
		return playerField;
		
	}

}
